É preciso expotar as funções e deixá-las por padrão para o framework ter acesso a ela e mostrar a página, mostrando tudo que for
colocado como retorno dessa função.
ex:
export default function primeiro(){
    return "Primeiro"
}

Ao criar um arquivo do tipo js, o framework já cria uma página web com essa url associada, dentro da pasta pages.

Uma forma de criar o html dentro desse retorno da função:
export default function jsx1Diferente() {
    return (
        <div>
            <h1>JSX #01</h1>
        </div>
    )
}

Com o react fragment é possível juntar duas tags adjacentes. É preciso importar a biblioteca do react para poder utilizar o 
fragment. Também é possível usar uma tag vazia. ex:
<> 
    <h1>Titulo</h1>
    <h2>Subtitulo</h2>
</>
Nesse caso haveria erro por ter duas tags adjacentes, já que elas não estão agrupadas em uma tag ou em uma lista. Para evitar o erro
há a possibilidade de ter essa tag vazia como forma de juntar tags adjacentes.

O React possibilita uma forma de trabalhar melhor usando componentes, o que deixa uma forma mais dinamica de estilizar e trabalhar o site.
Uma boa prática é sempre deixar a função default com o nome maiúsculo para demonstrar que aquela funçao refere-se à um componente.

Para conseguir usar o css é preciso colocar ele na pasta global de estilos e importar por lá, para que não altere todos os arquivos
do projeto. Além disso, é preciso buscar ele como uma forma mais precisa, usando o nome quando for referenciar no css.
Para driblar essa complicação, temos a opção de usar o .module.css que pode ser importado como um componente, geralmente usando o nome
style. Para acessar os estilos dentro desse css, basta usar uma forma de orientação a objeto, que acessa as informações pelas propriedades.

@Um conceito muito importante é que as propriedades são de apenas leitura, para que seja possível deixar elas como uma forma manipulável é 
preciso usar de outra forma.

Dentro do js não é possivel fazer variaveis com o uso de hífen, por isso o react permite usar variaveis com o camelCase.
Quando temos {{}} as chaves internas referem-se a um objeto. ex:

export default function Estilo(props) {

    return (
        <div>
            <h1 style={{
                backgroundColor: props.numero >= 0 ? "#2D2" : "#D22",
                color: props.color,
                textAlign: props.direita ? "right" : "left",
            }}>
                Texto #01
            </h1>
            <h2 className={props.numero >= 0 ? "azul" : "vermelho"}>
                Texto #02
            </h2>
        </div>
    )
}

Fazer o exercicio do tabuleiro

Dentro de uma lista de repetição é importante que cada tag tenha sua key única, uma forma simples de fzer isso dentro de um laço é 
atribuir a cada loop uma key para cada tag conforme o numero do iterator.

De uma forma melhor, é possível utilzar o map com uma arrow function para poder fazer a forma que queremos, usando a tag e colocando 
o conteúdo desejado na forma.

Para utilizar um model usa-se da maneira padrão, a unica diferença é que para colocar atributos usa-se # antes de cada um. Ex:

export default class Produto {
    #id
    #nome
    #preco

    constructor(id, nome, preco) {
        this.#id = id
        this.#nome = nome
        this.#preco = preco
    }

    get id() {
        return this.#id
    }
    
    get nome() {
        return this.#nome
    }
    
    get preco() {
        return this.#preco
    }
}

Para melhorar visualização é bom utilizar funções e componentes.

Props Children
Com essa opção podemos acessar as propriedades dos filhos, por exemplo:
export default function Lista(props) {
    return (
        <div>
            <h1>Lista de Algo</h1>
            <ul style={{
                listStyle: "none",
                padding: 0
            }}>
                {props.children}
            </ul>
        </div>
    )
}

import Item from "../../components/Item";
import Lista from "../../components/Lista";

export default function componenteComFilho() {
    return (
        <div>
            <Lista>
                <Item conteudo="Item #1" />
                <Item conteudo="Item #2" />
                <Item conteudo="Item #3" />
                <Item conteudo="Item #11" />
                <Item conteudo="Item #12" />
                <Item conteudo="Item #13" />
            </Lista>
        </div>
    )
}

Na função Lista, usamos props.children para acessar os filhos do componente Lista, que é possível visualizar na função componenteComFilho.

Temos uma árvore de componentes dentro da aplicação. Uma forma de ter a comunicação entre eles temos a comunicação direta e indireta.
A direta é mais básica e usamos ao passarmos dados diretamente via props.
ao usarmos algo como {...props} estamos passando todas as propriedades vinda de props para esse componente. ex:
<Filho nome = "Iago" {...props}/>

Contudo, caso já venha no props um valor para nome, o nome "Iago" será sobrescrito. Para driblar isso, devemos colocar o props primeiro e
tudo que vier depois irá ser trocado pelo valor que colocamos, ex:
<Filho {...props} nome = "Iago"/>

Já a comunicação indireta ocorre quando passamos informações do filho para o pai de forma indireta usando uma função que foi passada
pelo pai.
Importante destacar que é possível usar a função e passar diferentes parametros usando uma arrow function nao deifinida {() => f(param1, param2,..., paramN)}


Podemos chamar eventos dentro de funções ou fora. Além disso, podemos fazer um evento como propriedade de uma tag usando a forma de acessar
o js dentro de tags, ou seja, com uso de chaves. <button onClick = {() => console.log("ação")}> clique </button>

Para utilizar o valor de eventos, por exemplo colocar as coordenadas do mouse na tela, é preciso usar a função useState do react

Variaveis que usam o const tem a possibilidade do contruscting

Componente controlado -> Muito usado em formuláros
Para o input mudar, no caso ser possível escrever no input, é preciso mudar o estado. Para isso, usamos o OnChange

import { useState } from "react"

export default function formulario() {
    const [valor, setValor] = useState("")

    function alterarInput() {
        setValor(valor + "!")
    }

    return (
        <div style={{
            display: "flex",
            flexDirection: "column"
        }}>
            <span>{valor}</span>
            <input type="text" value={valor}
                onChange={e => setValor(e.target.value)} />
            <button onClick={alterarInput}>Alterar</button>
        </div>
    )
}


Dentro de Classes que são componentes (extends Component) temos o método render(). Como estamos usando classes só será possivel
usar as propriedades de classes usando o 'this.props.nomeDaPropriedade'. Além disso, só podemos mudar estados usando o setState.

import { Component } from "react";

export default class Contador extends Component {
    state = {
        numero: this.props.valorInicial ?? 0,
        passo: this.props.passo ?? 1
    }

    inc = () => {
        this.setState({
            numero: this.state.numero + this.state.passo
        })
    }

    dec = () => {
        this.setState({
            numero: this.state.numero - this.state.passo
        })
    }

    alterarPasso = (ev) => {
        this.setState({ passo: +ev.target.value })
    }

    renderForm() {
        return (
            <>
                <input type="number" min={1} max={1000}
                    value={this.state.passo}
                    onChange={this.alterarPasso} />
                <button onClick={this.dec}>-</button> //só é possivel usar esse this.dec por ser uma arrow function
                <button onClick={this.inc}>+</button>
            </>
        )
    }

    render() {
        return (
            <div>
                <h1>Contador (usando Classe)</h1>
                <h2>{this.state.numero}</h2>
                {this.renderForm()}
            </div>
        )
    }
}



import { Component } from "react";
import Contador from "../../components/Contador"

export default class ContadorPage extends Component {

    render() {
        return (
            <>
                <Contador valorInicial={100} passo={37} />
            </>
        )
    }
}

Sobre os Hooks
useState() -> retorna primeiro o valor do estado e uma função para mudar esse valor
const [number. setNumber] = useState(0)
Os hooks não podem ser executados mais de uma vez numa mesma execução, ou seja, não pode estar dentro de condicionais e fora ao mesmo tempo

useEffect() -> hook com função de fazer um fetch para uma api.
useEffect(() =>{

}, [ResourceType]) //Só faz o fetch quando o ResourceType é atualizado

useRef() -> hook com função persistir um valor durante o ciclo de componente sem a necessidade de renderizar novamente em caso de mudança.
Muito usado para referenciar elementos html (Apertar em um botão e focar em algum input por exemplo).
const inputRef useRef();

const focusImput = () => {
    inputRef.current.focus()
}
...
<input
    ref = {inputRef}
    value={name}
    OnChange{e => setName(e.target.value)}
    />
<button onClick={focusImput}> Focus </button>
...

Também podemos utilizá-lo para guardar o valor anterior ao useState.

useReducer() -> Gerencia o estado da aplicação ou guarda tarefas dentro do state. Bem parecido com o useState, mas é bem útil para tarefas mais complexas

const reducer = (state, action) => {
    switch(action.type){
        case "increment":
            return {
                counter: state.counter + 1,
            };
        case "decrement":
            return {
                counter: state.counter -1,
            };
        default:
            return state;
    }
};
const App = () =>{
    const [state, dispatch] = useReducer(reducer, {counter: 0});

    return (
        <div>
            <p>{state.counter}</p>
            <button onClick={() => dispactch({ type: "Increment"})}>Increment</button>
            <button onClick={() => dispactch({ type: "Decrement"})}>Decrement</button>

        </div>
    );

};

useContext() -> consegue passar props para toda uma árvore de componetes. Consome contextos de forma mais fácil.
useMemo() -> Vamos usar quando estivermos tendo problema de performance em alguma função. Basicamente, salva o valor na memória e, caso seja preciso usar a função, a função irá buscar o valor na memória, caso já exista, usa o valor da mmeoria, caso não, executa a função.
useCallback() -> também usamos para problema de performance. Com essa função nós podemos fazer com que uma função de state so seja renderizada novamente quando for necessário, evitando redenrização. Ou seja, aqui guardamos a função em memória.
useLayoutEffect() -> Basicamente igual ao useEffect. A maior diferença é que com o useLayoutEffect é executado antes do DOM ser montado pelo react e o useEffect é após.


Sobre a estrutura do projeto, antes de rodarmos o projeto com o start é preciso buildar o projeto. 
A pasta public é responsavel por guardar os assets publicos. É possível colocarmos uma pasta chamada components para deixar os componentes por padrão dentro dessa pasta e deixar mais oganizado.
A pasta page é repsonsável por deixar o arquivo que será uma página. E a pasta styles é reponsável pelos estilos globais.

Rotas
Quando temos um arquivo com o nome indice dentro de uma pasta o next tentara executar ele quando charmarmos o caminho dessa pasta no navegador.
Rotas dinâmica -> Podemos criar rotas dentro de outras pastas e essa rotas dinamicas são rotas que recebam parametro no link, basta colocar o nome ddentro de colchetes, por exemplo um arquivo chamado [id]. Dessa forma, o react entende que ele é dinamico e para usar esse paramentro passado,
usamos o useRouter. ex:
import { useRouter } from "next/router"


export default function rotas(){
    const router = useRouter()
    console.log(router.query)
    const codigo = router.query.id
    return (
        <div>
            <h1>Rotas / Id/ buscar</h1>
            <p>{codigo}</p>
        </div>
    )
}
caso queira que o valor recebido, o parametro, seja inteiro, basta colocar o sinal de positivo em  'const codigo = +router.query.id'.
Podemos fazer o mesmo em um arquivo, como por exemplo o arquivo '[nome].jsx'. Outra forma de conseguir acessar esses parametros é usando o query, por exemplo:
'const id = router.query.id', dessa forma, no link que tiver 'id=123' vamos receber esse valor '123' passado para 'id'.
Com a tag Link do next podemos colocar conexões entre páginas e essa tag não fica visivel para o html, não é uma tag a. Podemos usar essa navegação usando uma função com objetos e utilizando o link.

API 
Dentro da pasta pages temos a parte da API, sem ter que configurar o CORS, pois a api está junto com o backend. Dentro dessa pasta temos o arquivo heloo.js que retorna um array de json para o navegador.
Com o js podemos manipular os dados conseguindo receber os tipos de metodos de acesso do navegador.
export default (req, res) => {
   if(req.method === "GET"){
        res.status(200).json({metodo: req.method, nome: "Iago"})
   }else{
        res.status(200).json({metodo: req.method, nome: "Patrick"})

   }
}

Podemos receber o id, da mesma forma que vista antes e podemos manipular uma promessa usando o fetch.

import { useState } from "react"

export default function questao(){
    const [questao, setQuestao] = useState()
    
    fetch('http://localhost:3000/api/questao/123')
        .then(resp => resp.json())
        .then(json => console.log(json))
    return(
        <div>
            <h1>Questao</h1>
        </div>
    )
}
O fecth esta renderizendo varias vezes e, para evitar isso, usamod o useEffect:

import { useEffect, useState } from "react"

export default function questao(){
    const [questao, setQuestao] = useState(null)

    useEffect(() =>{
        fetch('http://localhost:3000/api/questao/123')
            .then(resp => resp.json())
            .then(setQuestao)

    }, [])

    function renderizarREspostas(){
        if(questao){
            return questao.respostas.map((resp, i )=>{
                return <li key ={i}>{resp}</li>
            })
        }
        return false
    }
    return(
        <div>
            <h1>Questao</h1>
            <div>
                <span> {questao?.id} - {questao?.enunciado}</span>
                <ul>
                    {renderizarREspostas()}
                </ul>
            </div>
        </div>
    )
}

O backend fica dentro da pasta API
Para colocar parametros na url da api podemos colocar o nome do arquivo como [...array], dessa forma tudo que vier depois do endereço base entre/ recebe parametros. Para que a url seja aceita sem os parametros é preciso ter [] no nome do arquivo, ou seja, '[[array]].js'.
Componentes estáticos
Para defirnir isso é precisamos exportar uma função com o nome 'getStaticProps', então ele vai gerar uma vez esse componente e vai mantelo. Dessa forma, a estrutura dele fica assim, com o retorno de um objeto:
export function getStaticProps(){
    return{
        props:{
            numero: Math.random()
        }
    }
}

export default function estatico(){
    return(
        <div>
            <span>Aleatorio: {props.numero}</span>
        </div>
    )
}
Para conseguirmos ver de fato com a api basta buildarmos a aplicação e então rodar o projeto com o comando 'npm start' que a página estática ira se manter apos recarregar a pagina.
