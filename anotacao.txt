a rota resource contem o create e edit, enquanto a apiResource nao contém esses dois métodos.

nao se esquecer que e preciso ter o accept no header do cliente para identificar que ele consegue tratar o retorno do tipo json

dentro do metodo update e preciso configurar para ser possivel utilizar o endpoint patch => Para isso e preciso percorrer as regras existentes e verificar quais foram selecionadas para serem mudadas

UPLOAD DE ARQUIVOS
Os arquivos nao vem no array de atribtos, mas sim num array de imagem

Para a persitencia de arquivos (salvar) basta recuperar o arquivo $image = $request->file('imagem')
$image->store('imagens', 'public') //imagens aqui e` o diretorio aonde sera salvo o arquivo. Para verificar esses diretorios ha os diretorios em filesystens na pasta config.





php seção 8:
é possivel incluir tabelas pelo proprio framework laravel, usando uma migration que contem apenas regras de inclusão de novas tabelas
default -> Valor padrão para caso o valor nao seja passado na criação da tabela
nullable -> Valor que pode ser vazio
O esquema de chave estrangeira foi feito de forma diferente que foi ensinado no ps

After -> criação de uma coluna após uma coluna já criada 
Comandos das migrate:
Status -> Mostra as migrates e demonstra se já foram executadas ou nao
Reset -> Reverte as alterações do banco, executa o método down
Refresh -> Reverte as migrações e depois executa novamente o comando de criação
Fresh -> Ele dropa os elementos e recria as migration

Eloquent ORM - Object Relation Map
Método para mapear dados entre o banco de dados e a aplicação

Tinker -> Console interativo que da acesso as classes do projeto pelo terminal 

O teste do eloquent usando a tecnologia do tinker é mais eficiete.
Os atributos são criandos em tempo real, enquanto se testa a classe, respeitando as colunas da tabela respectiva.
Quando há alterações no código fonte é preciso reiniciar o tinker para ele atualizar e manter as mudanças feitas.

Com o uso do all() é possivel recuperar todas instancias de determinada tabela
É possível fazer um foreach para percorrer o array dos atributos de cada objeto na tabela
Com o uso do find(primer_key) é possivel achar o objeto que foi requerido
where(), whereIn(), whereNotIn(), com base na igualdade, whereBetween(), whereNotBetween(), com base em um intervalo.
É possível colocar mais parametros para pesquisar com o where. orwhere() pode ser usado como uma forma de usar o 'or'.
<> -> diferente
whereNull() e whereNotNull().
Collections -> coleção de dados, possibilidade de conseguir lidar com o retorno da consulta com o eloquent
first, last, reverse -> first retorna o primeiro elemento do 'array', last o ultimo e o reverse reverte a ordem do 'array'
toArray() e toJson().
pluck('chave') -> recupera todos os valores de uma determinada chave.
                                Atualizando regristros
depois de alterarmos dados de algum objeto podemos salvar as atlterações no banco através do save().
com o fill(['nome' => 'novo nome',...]) podemos alterar os dados com um array associativo.
Podemos combinar o where() com o update() para mudar registros com atributos localizados pelo filtro.
delete() -> podemos combinar da mesma forma que o save ou update.
softDelete -> É preciso mudar a migration da classe que tera o softDelete para ter o campo do mesmo na sua tabela. Ela controla as
remoções feitas. É possivel recuperar aqueles dados que foram deletados pelo softDelete através do onlyTrashed()


Seção 10 - Middlewares
Com eles é possivel tomar ações no intermediario entre o acesso/resposta do cliente e a aplicação, possibilitando login, bloqueio
proteção e algumas outras ações, que manipulam a aplicação com base na origem.

php artisan make:middleware nomeDoMiddleware

Para utilizarmos os Middlewares passamos eles nas rotas, por exemplo:

Route::middleware(LogAcessoMiddleware::class)
    ->get('/', 'PrincipalController@principal')
    ->name('site.index');
    //Vale ressaltar que é possível colocar a parte do middleware no final também.

Dessa forma, antes de retornar algo, o middleware analisa a aplicação em si e pode decidir qual ação tomar, parar o acesso ou permitir.
Como forma de controlar os acessos, criamos um modelo de log, que irá persistir o ip que tentou acessar determinada rota.
Para acerssamos o ip e a rota utilizamos:
$ip = $request->server>get('REMOTE_ADDR');
$rota = $request->getRequestUri(); //RequestUri é o nome da variavel recebida pelo request, é possível visualizá-la pelo dd
basicamente, dentro da classe do middleware:
public function handle($request, Closure $next)
    {

        $ip = $request->server->get('REMOTE_ADDR');
        $rota = $request->getRequestUri();
        LogAcesso::create(['log' => "IP $ip requisitou a rota $rota"]);

        return $next($request);

    }

Também podemos usar os Middlewares nos controllers, mantendo a arquitetura e a lógica de aplicação, mudando apenas o local.
Para isso, utilizamos uma lógica de colocar o middleware() no construtor dentro do controller.

class NomeDoController extends Controller{
    public function __contruct(){
        $hits->middleware(NomeDoMiddleware::class);
    }
    .
    .
    .
}

Middlewares também podem estar em rotas para api. Para isso utilizamos a classe Kernel.php e colocamos os Middlewares dentro do
middlewareGroups, onde há separação entre 'web' e 'api'. Além disso, com essa classe podemos colocar middleware para todas as rotas web
e não somente em uma rota específica. 
Podemos usar apelidos para middlewares, dentro da classe Kernel.php podemos colocar o apelido que queremos dentro do $routeMiddleware.
Dessa forma, podemos usar esse apelido dentro das routes, por exemplo:
Route::middleware('log.acesso') //log.acesso foi colocado como apelido dentro da classe kernel.
    ->get('/', 'PrincipalController@principal')
    ->name('site.index');

Também podemos fazer o mesmo dentro do construct do middleware em um controller, por exemplo:
class NomeDoController extends Controller{
    public function __contruct(){
        $hits->middleware('log.acesso');
    }
    .
    .
    .
}

Da mesma forma que podemos fazer middleware para as requisições, podemos fazer para respostas, fazendo o encadeamento de middlewares.
Para isso, usando um apelido, podemos colocar os middleware que queremos separados por vírgulas dentro do middleware nas routes, por exemplo:
Route::middleware('log.acesso', 'autenticacao') 
    ->get('/', 'PrincipalController@principal')
    ->name('site.index');
Além disso, é preciso que dentro do middleware do log.acesso tenha o return com o $next para poder passar a requisição para o próximo middleware.
A ordem em que os middleware aparecem importa, eles são acessados de forma sequencial.

Uma forma útil de usar o middleware é utilizar somente para um grupo de rotas e, para isso, baste colocar o middleware na primeira route que contem o prefix, por exemplo:
Route::middleware('autenticacao')->prefix('/app')->group(function() {
    Route::get('/clientes', function(){return 'Clientes';})->name('app.clientes');
    Route::get('/fornecedores', 'FornecedorController@index')->name('app.fornecedores');
    Route::get('/produtos', function(){return 'produtos';})->name('app.produtos');
});

Podemos passar parametros para os middleware, basta colocamos após a chamada do middleware os parametros, usando :, por exemplo:
Route::middleware('autenticacao:param1, param2')->prefix('/app')->group(function() {
    Route::get('/clientes', function(){return 'Clientes';})->name('app.clientes');
    Route::get('/fornecedores', 'FornecedorController@index')->name('app.fornecedores');
    Route::get('/produtos', function(){return 'produtos';})->name('app.produtos');
});

Podemos recuperar a resposta do request colocando o  $next($request) dentro de uma variável antes de colocar ele direto no return, por exemplo:

$resposta = $next($request) //dessa forma podemos definir o statusCode ou manipular alguma outra variável dentro da resposta
$resposta->setStatusCode(201, 'O status da resposta e o texto da resposta foram modificados') //mudei o statuscode e a resposta que vai junto com o statuscode
return $resposta //após a modificação, retornarmos a resposta com as alterações devidas.

Reforçando, só podemos avançar pelos middlewares usando o next, até chegarmos a aplicação. Isso também se aplica quando for uma resposta da aplicação para o cliente.

Seção 18 - autenticacão API - Autorização JWT (Json Web Token)
Para validar o acesso de um cliente o sistema retorna um token de autorização a requisição do usuário. Autorização != Autenticação, essa afirmação é verdadeira pois A
autorização confirma que o usuário pode acessar as requisições sem persistir dados do cliente.
A esturutra do token JWT é composta por Header, Payload e Signature.

Para instalar o pacote de JWT-Auth é preciso ir até o diretorio do projeto e colocar o seguinte comando no terminal:
composer require tymon/jwt-auth "1.0.2" (versão Específica da aula)

Configuração do jwt-auth: https://jwt-auth.readthedocs.io/en/develop/

Após as configurações necessárias precisamos implementar a interface dentro do User. Para melhor visualização é possível ir na seção quick start do link acima.
O arquivo de exemplo está presente na pasta. Além dessas alterações é preciso configurar o auth guarda, mudando o auth, detalhes no site.
Além desses passos é preciso configurar as rotas de autenticação. Sendo elas com o metodo post com o nome login, logout, refresh e me. Exemplo:
    Route::post('login', 'App\Http\Controllers\AuthController@login');
    Route::post('logout', 'App\Http\Controllers\AuthController@logout');
    Route::post('refresh', 'App\Http\Controllers\AuthController@refresh');
    Route::post('me', 'App\Http\Controllers\AuthController@me');
Após isso, devemos criar o controller Auth, AuthController e colocar as funções das rotas presentes.
Usando o tinker podemos persirtir um usuário no banco de dados. Ao colocar o password é preciso passar a senha encriptada, usando a função bcrypt('senha')
exemplo:
    $user = new App\Models\User()
    $user->name = 'Name'
    $user->email = 'email'
    $user->password = bcrypt('senha')
    $user->save();

Próxmo passo é implementar o método de login. Ele deve autenticar o usuário e retornar o JWT. Para isso, recebemos as credenciais em uma variável e 
fazemos a autorização dentro de uma variavel, exemplo:
    public function login(Request $request) {
        
        $credenciais = $request->all(['email', 'password']); //[]

        //autenticação (email e senha)
        $token = auth('api')->attempt($credenciais);
        
        if($token) { //usuário autenticado com sucesso
            return response()->json(['token' => $token]);

        } else { //erro de usuário ou senha
            return response()->json(['erro' => 'Usuário ou senha inválido!'], 403);

            //401 = Unauthorized -> não autorizado
            //403 = forbidden -> proibido (login inválido)
        }

        //retornar um Json Web Token
        //return 'login';
    }
Após isso podemos configurar as rotas para serem protegidas e serem acessadas mediante a autenticação. O primeiro passo é colocar nas routesMiddleware o apelido para o JWT e validando a rota, então:
    'jwt.auth' => \Tymon\JWTAuth\Http\Middleware\Authenticate::class,
Depois, devemos colocar as rotas desejadas dentro de um pacote de autenticação.
Route::prefix('v1')->middleware('jwt.auth')->group(function() {
    Route::post('me', 'App\Http\Controllers\AuthController@me');
    Route::post('logout', 'App\Http\Controllers\AuthController@logout');
    Route::post('refresh', 'App\Http\Controllers\AuthController@refresh');
    Route::apiResource('cliente', 'App\Http\Controllers\ClienteController');
    Route::apiResource('carro', 'App\Http\Controllers\CarroController');
    Route::apiResource('locacao', 'App\Http\Controllers\LocacaoController');
    Route::apiResource('marca', 'App\Http\Controllers\MarcaController');
    Route::apiResource('modelo', 'App\Http\Controllers\ModeloController');
});
O prefixo em questão é para colocar esse prefixo antes do acesso dessas rotas, então deveria ser acessado usando 'localhost:8000/v1/me' e por ai vai.
Agora é preciso fixar essa autenticação ao cliente para ele poder acessar as áreas que ele tem acesso. Para isso, o cliente precisa persistir o token de retorno após a autenticação do usuário via login.
Uma forma de conseguir acessar pelo postman é passar o token recebido pelo processo de autenticação e colocá-lo no header com a key Authorization e no value colocar Bearer 'token' dessa forma, bearer, depois um espaço e depois o token.
Dessa forma a api irá liberar as rotas que são protegidas pela autenticação. Podemos configurar esse token, como um tempo de validade.
Através do método me do controller é possível recuperar os dados do usuário, para isso funcionar é preciso que ele fique dentro das rotas protegidas.
    public function me() {
        return response()->json(auth()->user());
    }
Podemos também atualizar a autorização, ou seja, renovar a autorização. Para isso usamos o método refresh. Recebemos o token verificando a atuorização e dando um refresh. Após isso, basta retorná-lo.
    public function refresh() {
        $token = auth('api')->refresh(); //cliente encaminhe um jwt válido
        return response()->json(['token' => $token]);
    }
É importante destacar que esse refresh muda o token, por isso a atualização.
Após isso, podemos agora usar o método logout, para finalizar a autenticação do usuário. Para isso, é importante que a rota de logout esteja protegida também. Para isso, usando o método logout() do auth, dessa maneira:
    public function logout() {
        auth('api')->logout();
        return response()->json(['msg' => 'Logout foi realizado com sucesso!']);
    }
Sobre a anatomia do JWT: O token por si é dividido em três partes, sendo elas separadas por '.'. Como foi dito anteriormente, essas partes são o header, Payload e o Signature. No payload podemos colocar informações do usuário, como nível de acesso, email, etc. 
A parte do Signature é dividida em três partes também, o header, payload e uma assinatura criptografada e exclusiva da api.
Agora para colocar um prazo no JWT podemos mudar dentro do Payload  o exp. A propriedade iat refere-se a criação e a exp a expiração desse token. Para isso, vamos a pasta jwt.php, na pasta config e mudar o ttl. Ou colocarmos uma variável JTW_TTL no .env e alterar o tempo.
    'ttl' => env('JWT_TTL', 60), //em minutos
    JWT_TTL=120 //dessa forma ele fica 2 horas


Dicas úteis:
print_r  não funciona para response, use dd.
no site jwt.io é possível debbugar o token do jwt.